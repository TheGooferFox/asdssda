-- SkidFling.lua
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local Player   = Players.LocalPlayer

-- Notification helper
local function Message(title, text, duration)
    StarterGui:SetCore("SendNotification", {
        Title    = title,
        Text     = text,
        Duration = duration,
    })
end

-- The actual fling routine
-- allowSit = true if we should fling even sitting targets ("All" mode)
local function SkidFling(targetPlayer, allowSit)
    local char       = Player.Character
    local humanoid   = char and char:FindFirstChildOfClass("Humanoid")
    local root       = humanoid and humanoid.RootPart
    local tch        = targetPlayer.Character
    local thum       = tch and tch:FindFirstChildOfClass("Humanoid")
    local troot      = thum and thum.RootPart
    local thead      = tch and tch:FindFirstChild("Head")

    if not (char and humanoid and root) then
        return Message("Error", "Could not find your character", 5)
    end

    -- save original spot
    local originalCFrame = root.CFrame

    -- donâ€™t fling a seated target (unless allowed)
    if thum and thum.Sit and not allowSit then
        return Message("Error", "Target is sitting", 5)
    end

    -- point camera at them
    if thead then
        workspace.CurrentCamera.CameraSubject = thead
    elseif troot then
        workspace.CurrentCamera.CameraSubject = troot
    elseif thum then
        workspace.CurrentCamera.CameraSubject = thum
    end

    if not tch:FindFirstChildWhichIsA("BasePart") then
        return Message("Error", "No valid part to fling", 5)
    end

    -- helper to slam you into their part
    local function FPos(part, posOffset, angOffset)
        local cf = CFrame.new(part.Position) * posOffset * angOffset
        root.CFrame = cf
        char:SetPrimaryPartCFrame(cf)
        root.Velocity    = Vector3.new(9e7, 9e8, 9e7)
        root.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
    end

    -- core fling loop
    local function doFling(part)
        local startTime = tick()
        local angle     = 0
        repeat
            if part.Velocity.Magnitude < 50 then
                angle = angle + 100
                FPos(part,
                     CFrame.new(0, 1.5, 0) + (thum and thum.MoveDirection or Vector3.new()),
                     CFrame.Angles(math.rad(angle), 0, 0))
                task.wait()
            else
                -- fallback
                FPos(part,
                     CFrame.new(0, 1.5, thum.WalkSpeed),
                     CFrame.Angles(math.rad(90), 0, 0))
                task.wait()
            end
        until part.Velocity.Magnitude > 500
           or part.Parent ~= tch
           or (thum and thum.Sit)
           or humanoid.Health <= 0
           or tick() > startTime + 2
    end

    -- prevent parts from auto-destroying
    local oldFPD = workspace.FallenPartsDestroyHeight
    workspace.FallenPartsDestroyHeight = math.huge

    -- add a huge BodyVelocity so we break free of constraints
    local bv = Instance.new("BodyVelocity")
    bv.Name     = "SkidFlingVel"
    bv.Velocity = Vector3.new(9e8, 9e8, 9e8)
    bv.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bv.Parent   = root

    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)

    -- choose which part to fling
    if troot and thead and (troot.Position - thead.Position).Magnitude > 5 then
        doFling(thead)
    elseif troot then
        doFling(troot)
    elseif thead then
        doFling(thead)
    else
        bv:Destroy()
        humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        workspace.CurrentCamera.CameraSubject = humanoid
        workspace.FallenPartsDestroyHeight = oldFPD
        return Message("Error", "Target missing all parts", 5)
    end

    -- cleanup
    bv:Destroy()
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
    workspace.CurrentCamera.CameraSubject = humanoid

    -- restore original position
    repeat
        root.CFrame = originalCFrame
        char:SetPrimaryPartCFrame(originalCFrame)
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
        task.wait()
    until (root.Position - originalCFrame.p).Magnitude < 25

    workspace.FallenPartsDestroyHeight = oldFPD
end

-- Module export for OrionLib
local Targets = {"All", "Others", "Random"}

return {
    Name     = "SkidFling",
    Targets  = Targets,
    Callback = function(selection)
        local toFling  = {}
        local allowSit = false

        if selection == "All" then
            -- fling everybody, even if they're sitting
            allowSit = true
            for _, p in ipairs(Players:GetPlayers()) do
                table.insert(toFling, p)
            end

        elseif selection == "Others" then
            -- fling everyone except you, but skip sitters
            for _, p in ipairs(Players:GetPlayers()) do
                if p ~= Player then
                    table.insert(toFling, p)
                end
            end

        elseif selection == "Random" then
            -- pick one random other player
            local list = Players:GetPlayers()
            for i = #list, 1, -1 do
                if list[i] == Player then
                    table.remove(list, i)
                end
            end
            if #list == 0 then
                return Message("Error", "No other players to fling", 5)
            end
            table.insert(toFling, list[math.random(#list)])

        else
            -- treat selection as a (partial) name
            local name = selection:lower()
            for _, p in ipairs(Players:GetPlayers()) do
                if p ~= Player then
                    local ln = p.Name:lower()
                    local ld = p.DisplayName:lower()
                    if ln:match("^" .. name) or ld:match("^" .. name) then
                        table.insert(toFling, p)
                        break
                    end
                end
            end
            if #toFling == 0 then
                return Message("Error", "Player '" .. selection .. "' not found", 5)
            end
        end

        -- perform the fling on each chosen target
        for _, targ in ipairs(toFling) do
            SkidFling(targ, allowSit)
        end
    end,
}
